Микросервисы и монолит.
Архитерктуры SOA(сервисно-ориентированная архитектура) и Microservice

Microservice - это приложение разбитое на несколько, которые обмениваются своей информацией,
		имеют свой жизненный цикл.
		+ легче поддерживать и разворачивать
		+ изменения в одном севисе не заденут работоспособность в другом
		+ горизонтальное масштабирование
		+ микросервисы независимы от языка
		- сложно реализовать транзакционность и коммутативность
		- сложнее программировать бизнес-структуру
		Для использования баз данных используется подход DataBasePerSystem - т.е.
			каждый микросервис имеет свою БД, которая не связанна с БД других микросервисов.
			



Подходы: 
DataBasePerSystem - т.е. каждый микросервис имеет свою БД, которая не связанна с БД других микросервисов.
			Микросервисы взаимодействуют друг с другом.
			
Принцип YAGNI - You ain't gonna need it,(не делай того, что не требуется) 
		Заказчик не должен оплачивать ненужные ему функции, а разработчики не должны 
		тратить своё оплачиваемое время на реализацию того, что не требуется.
		Все что не предусмотрено техническим заданием проекта, не должно быть в нем.
		
KISS - Keep It Short and Simple. делайте вещи проще. Порой наиболее правильное решение – это 
		наиболее простая реализация задачи, в которой нет ничего лишнего.
		
DRY - Don`t Repeat Yourself

Big Design Up Front - Глобальное проектирование прежде всего. Прежде чем переходить к реализации, 
		убедитесь, что все хорошо продумано.
		
Avoid Premature Optimization - Избегайте преждевременной оптимизации. Эта практика побуждает 
		разработчиков оптимизировать код до того, как необходимость этой оптимизации 
		будет доказана. Преждевременная оптимизация может привести к задержкам в коде и, 
		следовательно, увеличит затраты времени на вывод функций на рынок.
		




